{"version":3,"sources":["Components/Todo.js","Components/TodoList.js","App.js","index.js"],"names":["ButtonStyled","styled","Button","p","isCompleted","css","Todo","todo","onCheckBtnClick","shouldFitContainer","iconAfter","className","onClick","id","primaryColor","name","TodoList","todoList","map","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","TODO_APP_STORAGE_KEY","getAnalytics","App","useState","setTodoList","textInput","setTextInput","useEffect","storagedTodoList","localStorage","getItem","JSON","parse","setItem","stringify","onTextInputChange","useCallback","e","target","value","onAddBtnClick","v4","prevState","placeholder","elemAfterInput","isDisabled","appearance","padding","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAKMA,EAAeC,YAAOC,IAAPD,CAAH,yWAKR,SAACE,GAAD,OAAOA,EAAEC,aAAeC,YAAjB,+EAsBF,SAASC,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,gBACjC,OACI,cAACR,EAAD,CACII,YAAaG,EAAKH,YAClBK,oBAAkB,EAClBC,WAAYH,EAAKH,aACb,sBAAMO,UAAU,aAAaC,QAAS,kBAAMJ,EAAgBD,EAAKM,KAAjE,SACI,cAAC,IAAD,CAAWC,aAAa,cALpC,SAUKP,EAAKQ,OCzCH,SAASC,EAAT,GAAkD,IAA9BC,EAA6B,EAA7BA,SAAUT,EAAmB,EAAnBA,gBACzC,OACI,mCAEOS,EAASC,KAAI,SAAAX,GAAI,OAAI,cAACD,EAAD,CAAoBC,KAAMA,EAAMC,gBAAiBA,GAAtCD,EAAKM,S,oCCkB9CM,EAAMC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOXC,GAFYC,YAAaV,GAEF,YA6DdW,MA3Df,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOd,EAAP,KAAiBe,EAAjB,KACA,EAAkCD,mBAAS,IAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAmBC,aAAaC,QAAQV,GAC3CQ,GACDJ,EAAYO,KAAKC,MAAMJ,MAExB,IAEHD,qBAAU,WACRE,aAAaI,QAAQb,EAAsBW,KAAKG,UAAUzB,MACzD,CAACA,IAEJ,IAAM0B,EAAoBC,uBAAY,SAACC,GACrCX,EAAaW,EAAEC,OAAOC,SACrB,IAEGC,EAAgBJ,uBACpB,SAACC,GACCb,EAAY,CACV,CAAEnB,GAAIoC,cAAMlC,KAAMkB,EAAW7B,aAAa,IADjC,mBAELa,KAENiB,EAAa,MAEf,CAACD,EAAWhB,IAGRT,EAAkBoC,uBAAY,SAAC/B,GACnCmB,GAAa,SAAAkB,GAAS,OAAIA,EAAUhC,KAAK,SAAAX,GAAI,OAAIA,EAAKM,KAAOA,EAAZ,2BAAqBN,GAArB,IAA2BH,aAAa,IAAQG,UAChG,IAEH,OACE,qCACE,wEACA,cAAC,IAAD,CACAQ,KAAK,WACLoC,YAAY,6CACZC,eACE,cAAC,IAAD,CACEC,YAAapB,EACbqB,WAAW,UACX1C,QAASoC,EAHX,qBAQF3C,IAAK,CAACkD,QAAS,eACfR,MAAOd,EACPuB,SAAUb,IAEV,cAAC3B,EAAD,CAAUC,SAAUA,EAAUT,gBAAiBA,QC/ErDiD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fbac5d44.chunk.js","sourcesContent":["import React from 'react'\r\nimport Button from '@atlaskit/button'\r\nimport styled, { css } from 'styled-components'\r\nimport CheckIcon from '@atlaskit/icon/glyph/check'\r\n\r\nconst ButtonStyled = styled(Button)`\r\n    margin-top: 5px;\r\n    text-align: left;\r\n\r\n    &, &:hover{\r\n        ${(p) => p.isCompleted && css`\r\n        text-decoration: line-through;\r\n        `}\r\n    }\r\n\r\n\r\n    &:hover{\r\n        .check-icon{\r\n            display: inline-block;\r\n        }\r\n    }\r\n\r\n    .check-icon{\r\n        display: none;\r\n\r\n        &:hover{\r\n            background-color: #e2e2e2;\r\n            border-radius: 3px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Todo({ todo, onCheckBtnClick }) {\r\n    return (\r\n        <ButtonStyled \r\n            isCompleted={todo.isCompleted}\r\n            shouldFitContainer \r\n            iconAfter={!todo.isCompleted &&(\r\n                <span className=\"check-icon\" onClick={() => onCheckBtnClick(todo.id)}>\r\n                    <CheckIcon primaryColor='#4fff4f' />\r\n                </span>\r\n                )\r\n            }\r\n        >\r\n            {todo.name}\r\n        </ButtonStyled>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nexport default function TodoList({ todoList, onCheckBtnClick }) {\r\n    return (\r\n        <>\r\n           {\r\n               todoList.map(todo => <Todo key={todo.id} todo={todo} onCheckBtnClick={onCheckBtnClick} />)\r\n           }\r\n        </>\r\n    )\r\n}\r\n","import React, {useState, useCallback, useEffect} from 'react'\nimport TodoList from './Components/TodoList.js'\nimport TextField from '@atlaskit/textfield'\nimport Button from '@atlaskit/button'\nimport { v4 } from 'uuid'\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBZmGEra2SvTO4HlcyEXiZeL1qAb_kat-k\",\n  authDomain: \"todoapp-73322.firebaseapp.com\",\n  projectId: \"todoapp-73322\",\n  storageBucket: \"todoapp-73322.appspot.com\",\n  messagingSenderId: \"548251965745\",\n  appId: \"1:548251965745:web:2bfb7fc844e1caa37ff810\",\n  measurementId: \"G-YHC3F59KXV\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nconst TODO_APP_STORAGE_KEY = 'TODO_APP'\n\nfunction App() {\n\n  const [todoList, setTodoList] = useState([]);\n  const [textInput, setTextInput] = useState(\"\");\n\n  useEffect(() => {\n    const storagedTodoList = localStorage.getItem(TODO_APP_STORAGE_KEY)\n    if(storagedTodoList){\n      setTodoList(JSON.parse(storagedTodoList));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todoList));\n  }, [todoList])\n\n  const onTextInputChange = useCallback((e) => {\n    setTextInput(e.target.value);\n  }, []);\n\n  const onAddBtnClick = useCallback(\n    (e) => {\n      setTodoList([\n        { id: v4(), name: textInput, isCompleted: false },\n         ...todoList \n      ]);\n      setTextInput('');\n    }, \n    [textInput, todoList]\n  );\n\n  const onCheckBtnClick = useCallback((id) => {\n    setTodoList( prevState => prevState.map( todo => todo.id === id ? {...todo, isCompleted: true} : todo ) );\n  }, []);\n  \n  return (\n    <>\n      <h3>Danh sách việc cần làm</h3>\n      <TextField \n      name=\"add-todo\" \n      placeholder=\"Thêm mới việc cần làm\" \n      elemAfterInput={\n        <Button \n          isDisabled={!textInput} \n          appearance=\"primary\" \n          onClick={onAddBtnClick}\n        >\n            Thêm\n        </Button>\n      } \n      css={{padding: \"2px 4px 2px\"}}\n      value={textInput}\n      onChange={onTextInputChange}\n      ></TextField>\n      <TodoList todoList={todoList} onCheckBtnClick={onCheckBtnClick} ></TodoList>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}